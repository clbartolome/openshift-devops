apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i
  namespace: ci-cd-workspace
  annotations:
    argocd.argoproj.io/sync-wave: "48"
spec:
  description: s2i-java task clones a Git repository and builds and pushes a container
    image using S2I and a Java builder image.
  params:
  - default: latest
    description: The tag of java imagestream for java version
    name: VERSION
    type: string
  - default: .
    description: The location of the path to run s2i from
    name: PATH_CONTEXT
    type: string
  - default: "true"
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS
      registry)
    name: TLSVERIFY
    type: string
  - default: ""
    description: Additional Maven arguments
    name: MAVEN_ARGS_APPEND
    type: string
  - default: "false"
    description: Remove the Maven repository after the artifact is built
    name: MAVEN_CLEAR_REPO
    type: string
  - default: ""
    description: The base URL of a mirror used for retrieving artifacts
    name: MAVEN_MIRROR_URL
    type: string
  - description: Location of the repo where image has to be pushed
    name: IMAGE
    type: string
  - default: registry.redhat.io/rhel8/buildah@sha256:b48f410efa0ff8ab0db6ead420a5d8d866d64af846fece5efb185230d7ecf591
    description: The location of the buildah builder image.
    name: BUILDER_IMAGE
    type: string
  - default: "false"
    description: Skip pushing the built image
    name: SKIP_PUSH
    type: string
  - default: []
    description: Environment variables to set during _build-time_.
    name: ENV_VARS
    type: array
  results:
  - description: Digest of the image just built.
    name: IMAGE_DIGEST
    type: string
  steps:
  - args:
    - $(params.ENV_VARS[*])
    env:
    - name: HOME
      value: /tekton/home
    image: registry.redhat.io/source-to-image/source-to-image-rhel8@sha256:6a6025914296a62fdf2092c3a40011bd9b966a6806b094d51eec5e1bd5026ef4
    name: generate
    resources: {}
    script: |
      echo "MAVEN_CLEAR_REPO=$(params.MAVEN_CLEAR_REPO)" > /env-vars/env-file

      [[ '$(params.MAVEN_ARGS_APPEND)' != "" ]] &&
        echo "MAVEN_ARGS_APPEND=$(params.MAVEN_ARGS_APPEND)" >> /env-vars/env-file

      [[ '$(params.MAVEN_MIRROR_URL)' != "" ]] &&
        echo "MAVEN_MIRROR_URL=$(params.MAVEN_MIRROR_URL)" >> /env-vars/env-file

      echo "Processing Build Environment Variables"
      for var in "$@"
      do
        echo "$var" >> /env-vars/env-file
      done

      s2i build $(params.PATH_CONTEXT) image-registry.openshift-image-registry.svc:5000/openshift/java:$(params.VERSION) \
      --image-scripts-url image:///usr/local/s2i \
      --as-dockerfile /gen-source/Dockerfile.gen --environment-file /env-vars/env-file
    volumeMounts:
    - mountPath: /gen-source
      name: gen-source
    - mountPath: /env-vars
      name: env-vars
    workingDir: $(workspaces.source.path)
  - image: $(params.BUILDER_IMAGE)
    name: build-and-push
    resources: {}
    script: |
      buildah bud --ulimit nofile=4096:4096 --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) \
         --layers -f /gen-source/Dockerfile.gen -t $(params.IMAGE) .

      [[ "$(params.SKIP_PUSH)" == "true" ]] && echo "Push skipped" && exit 0
      [[ "$(workspaces.dockerconfig.bound)" == "true" ]] && export DOCKER_CONFIG="$(workspaces.dockerconfig.path)"
      buildah push --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) \
        --digestfile $(workspaces.source.path)/image-digest $(params.IMAGE) \
        docker://$(params.IMAGE)

      cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
    securityContext:
      capabilities:
        add:
        - SETFCAP
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - mountPath: /gen-source
      name: gen-source
    workingDir: /gen-source
  volumes:
  - emptyDir: {}
    name: varlibcontainers
  - emptyDir: {}
    name: gen-source
  - emptyDir: {}
    name: env-vars
  workspaces:
  - mountPath: /workspace/source
    name: source
  - description: An optional workspace that allows providing a .docker/config.json
      file for Buildah to access the container registry. The file should be placed
      at the root of the Workspace with name config.json.
    name: dockerconfig
    optional: true